import Head from "next/head";
import { Inter } from "next/font/google";
import Webcam from "react-webcam";
import {isMobile} from 'react-device-detect';
import style from "../styles/Home.module.css";
import { useState, useRef, useEffect } from "react";

import { GestureRecognizer, FilesetResolver } from "@mediapipe/tasks-vision";

const inter = Inter({ subsets: ["latin"] });

const createGestureRecognizer = async () => {
    const vision = await FilesetResolver.forVisionTasks("https://cdn.jsdelivr.net/npm/@mediapipe/tasks-vision@0.10.3/wasm");
    let gestureRecognizer = await GestureRecognizer.createFromOptions(vision, {
        baseOptions: {
            modelAssetPath: "https://storage.googleapis.com/mediapipe-models/gesture_recognizer/gesture_recognizer/float16/1/gesture_recognizer.task",
            delegate: "GPU"
        },
        runningMode: "VIDEO"
      });
    return gestureRecognizer;
}

const determineCount = (results) => {
    let fingerCount = 0;
    if (results.landmarks) {
        fingerCount = 0;
    
        for (const landmarks of results.landmarks) {
            const handedness = results.handednesses[0][0].displayName;
            if (handedness == "Left" && landmarks[4].x > landmarks[3].x) {
                fingerCount++;
            }
            if (handedness == "Right" && landmarks[4].x < landmarks[3].x) {
                fingerCount++;
            }
    
            if (landmarks[8].y < landmarks[6].y) {
                fingerCount++;
            }
            if (landmarks[12].y < landmarks[10].y) {
                fingerCount++;
            }
            if (landmarks[16].y < landmarks[14].y) {
                fingerCount++;
            }
            if (landmarks[20].y < landmarks[18].y) {
                fingerCount++;
            }
        }
    }

    return fingerCount;
}

export default function Home() {
    const [fingerCount, setFingerCount] = useState(0);
    const [confidence, setConfidence] = useState(0);
    const [label, setLabel] = useState("");

    const camera = useRef(null);
    const canvas = useRef(null);

    let results = undefined;

    const videoConstraints = {
        width: { min: 640, ideal: 1920, max: 1920 },
        height: { min: 400, ideal: 1080 },
        facingMode: isMobile ? "environment" : "user"
    };

    useEffect(() => {
        // context = canvas.current.getContext("2d");
        // const drawingUtils = new DrawingUtils(context);

        // context.save();
        // context.clearRect(0, 0, context.canvas.width, context.canvas.height);

        createGestureRecognizer()
        .then((x) => {
            setInterval(() => {
                results = x.recognizeForVideo(camera.current.video, Date.now());
                if (results.landmarks) {
                    // console.log(results.landmarks);
                    setFingerCount(determineCount(results));
                }

                if (results.gestures.length > 0) {
                    setConfidence(results.gestures[0][0].score * 100);
                    setLabel(results.gestures[0][0].categoryName);
                }
            }, 500);
        })
    }, []);

    return (
        <>
            <Head>
                <title>GCRA</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={`${inter.className}`}>
                <Webcam 
                    videoConstraints={videoConstraints} 
                    className={style.webcam}
                    audio={false}
                    ref={camera} />
                <canvas ref={canvas} className={style.webcam}></canvas>
                <div>
                    {/* <button >Disable landmarks</button> */}
                    <div className={style.output}>
                        <p><b>Count: </b>{fingerCount}</p>
                        <p><b>Accuracy: </b>{confidence.toFixed(2)}%</p>
                        <p><b>Label: </b>{label}</p>
                    </div>
                </div>
            </main>
        </>
  );
}
